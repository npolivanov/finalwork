{"version":3,"sources":["images/brush.svg","images/eraser.svg","reducers/panelTools/index.tsx","reducers/controlScene/index.tsx","components/Scene/components/Text.tsx","components/Scene/index.tsx","components/PanelTools/index.tsx","reducers/timeLine/index.tsx","components/TimeLine/index.tsx","components/TopPanel/index.tsx","App.tsx","serviceWorker.ts","controlSaga/index.tsx","api/request.tsx","sagas.js","store/index.tsx","index.tsx"],"names":["module","exports","actionTypes","appActions","selectTools","value","type","payload","setColor","color","setBackgroundColor","setWidth","width","setFigures","figure","setLine","drawLine","array","setEraser","setText","obj","setCurrentSize","setAlign","setStyle","setValueText","setSelectedFigure","setFigureDraw","initialState","backgroundColor","lineWidth","fontFamily","fontSize","valueText","currentAlign","currentTool","figures","tools","size","selected","selectedFigure","arrayFiguresDraw","currentFontSize","arrayFontSize","font","id","fontStyle","arrayFontStyle","arrayAlign","panelTools","state","newStateTools","map","item","document","body","style","cursor","BrushCursor","EraserCursor","figuresDrawTriangle","push","x","y","eraser","text","drawLines","length","concat","setDraw","setScale","draw","scale","controlScene","props","textRef","React","useRef","trRef","useState","isSelected","setIsSelected","useEffect","console","log","current","setNode","getLayer","batchDraw","Fragment","align","fill","ref","draggable","onClick","setDrawScene","Wrapper","styled","div","Card","action","actionPanel","connect","drawScene","transform","container","onMouseDown","e","canvas","getElementById","onmousemove","offsetX","offsetY","onmouseup","evt","clicked","height","i","key","points","stroke","onMouseUp","strokeWidth","Text","edit","Container","IconButton","aria-label","component","returnTool","clickDoneShot","createVideo","shots","TimeLine","Button","variant","ColorPickerOverlay","ColorPicker","ColorDisplay","TextFieldGroup","TextGroup","displayColorPicker","setDisplayColorPicker","displayColorPickerBG","setDisplayColorPickerBG","ButtonGroup","onChange","ev","rgb","r","g","b","a","TextField","label","target","marginLeft","FormControl","InputLabel","htmlFor","NativeSelect","event","inputProps","name","background","App","Boolean","window","location","hostname","match","setScreenShot","wrapper","querySelector","url","data","toDataURL","axios","post","then","res","status","Error","catch","error","get","rootSaga","takeEvery","actionTimeLine","sagaMiddleware","createSagaMiddleware","reducers","combineReducers","timeLine","composeEnhancers","composeWithDevTools","store","createStore","applyMiddleware","run","addEventListener","getState","wheelDelta","dispatch","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","registration","unregister","message"],"mappings":"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","file":"static/js/main.3a0be006.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/brush.a13dfd9a.svg\";","module.exports = __webpack_public_path__ + \"static/media/eraser.cb2bc092.svg\";","import BrushCursor from \"images/brush.svg\";\nimport EraserCursor from \"images/eraser.svg\";\n\nexport const actionTypes = {\n  SELECT_TOOLS: \"SELECT_TOOLS\",\n  SET_COLOR: \"SET_COLOR\",\n  SET_WIDTH: \"SET_WIDTH\",\n  SET_FIGURES: \"SET_FIGURES\",\n  SET_LINE: \"SET_LINE\",\n  DRAW_LINE: \"DRAW_LINE\",\n  SET_ERASER: \"ERASER_LINE\",\n  SET_TEXT: \"SET_TEXT\",\n  SET_CURRENT_SIZE: \"SET_CURRENT_SIZE\",\n  SET_ALIGN: \"SET_ALIGN\",\n  SET_STYLE: \"SET_STYLE\",\n  SET_VALUE_TEXT: \"SET_VALUE_TEXT\",\n  SET_BACKGROUND_COLOR: \"SET_BACKGROUND_COLOR\",\n  SET_SELECTED_FIGURE: \"SET_SELECTED_FIGURE\",\n  SET_FIGURE_DRAW: \"SET_FIGURE_DRAW\",\n};\n\nexport const appActions = {\n  selectTools: (value: any) => ({\n    type: actionTypes.SELECT_TOOLS,\n    payload: value,\n  }),\n  setColor: (color: string) => ({\n    type: actionTypes.SET_COLOR,\n    payload: color,\n  }),\n  setBackgroundColor: (color: string) => ({\n    type: actionTypes.SET_BACKGROUND_COLOR,\n    payload: color,\n  }),\n  setWidth: (width: number) => ({\n    type: actionTypes.SET_WIDTH,\n    payload: width,\n  }),\n  setFigures: (figure: any[]) => ({\n    type: actionTypes.SET_FIGURES,\n    payload: figure,\n  }),\n  setLine: () => ({\n    type: actionTypes.SET_LINE,\n  }),\n  drawLine: (array: number[]) => ({\n    type: actionTypes.DRAW_LINE,\n    payload: array,\n  }),\n  setEraser: (array: number[]) => ({\n    type: actionTypes.SET_ERASER,\n    payload: array,\n  }),\n  setText: (obj: any) => ({\n    type: actionTypes.SET_TEXT,\n    payload: obj,\n  }),\n  setCurrentSize: (payload: any) => ({\n    type: actionTypes.SET_CURRENT_SIZE,\n    payload: payload,\n  }),\n  setAlign: (payload: string) => ({\n    type: actionTypes.SET_ALIGN,\n    payload: payload,\n  }),\n  setStyle: (payload: string) => ({\n    type: actionTypes.SET_STYLE,\n    payload: payload,\n  }),\n  setValueText: (payload: string) => ({\n    type: actionTypes.SET_VALUE_TEXT,\n    payload: payload,\n  }),\n  setSelectedFigure: (payload: string) => ({\n    type: actionTypes.SET_SELECTED_FIGURE,\n    payload: payload,\n  }),\n  setFigureDraw: (payload: any) => ({\n    type: actionTypes.SET_FIGURE_DRAW,\n    payload: payload,\n  }),\n};\n\nconst initialState = {\n  color: \"rgba(0, 0, 0, 1)\",\n  backgroundColor: \"rgba(0, 0, 0, 1)\",\n  lineWidth: 3,\n  fontFamily: \"calibri\",\n  fontSize: 15,\n  valueText: \"New text\",\n  currentAlign: \"left\",\n  currentTool: \"brush\",\n  figures: [] as any,\n  tools: [\n    {\n      size: 3,\n      selected: true,\n      type: \"brush\",\n    },\n    {\n      selected: false,\n      type: \"delete\",\n    },\n    {\n      selected: false,\n      type: \"text\",\n    },\n    {\n      selected: false,\n      type: \"figure\",\n    },\n  ],\n  selectedFigure: \"triangle\",\n  arrayFiguresDraw: [\"triangle\", \"square\", \"circle\"],\n  currentFontSize: 1,\n  arrayFontSize: [\n    { font: \"Times New Roman\", id: 0 },\n    { font: \"calibri\", id: 1 },\n    { font: \"arial\", id: 2 },\n  ],\n  fontStyle: \"normal\",\n  arrayFontStyle: [\"normal\", \"bold\", \"italic\"],\n  arrayAlign: [\"left\", \"center\", \"right\"],\n};\n\nfunction panelTools(state = initialState, { type, payload }: any) {\n  switch (type) {\n    case actionTypes.SELECT_TOOLS:\n      let newStateTools: any = { ...state };\n      let tools: any = state.tools;\n      newStateTools.currentTool = payload;\n      newStateTools.tools = tools.map((item: any) => {\n        if (item.type === payload) {\n          if (payload === \"brush\" && !item.selected === true) {\n            (document as any).body.style.cursor = `url(${BrushCursor}) 4 12, auto`;\n          } else if (payload === \"delete\" && !item.selected === true) {\n            (document as any).body.style.cursor = `url(${EraserCursor}) 4 12, auto`;\n          } else if (payload === \"text\" && !item.selected === true) {\n            (document as any).body.style.cursor = `text`;\n          } else if (payload === \"figure\" && !item.selected === true) {\n            (document as any).body.style.cursor = `auto`;\n          } else {\n            newStateTools.currentTool = \"\";\n            (document as any).body.style.cursor = `auto`;\n          }\n          item.selected = !item.selected;\n        } else {\n          item.selected = false;\n        }\n        return item;\n      });\n      return { ...newStateTools };\n    case actionTypes.SET_FIGURE_DRAW:\n      let figuresDrawTriangle = [...state.figures];\n      if (state.selectedFigure === \"triangle\") {\n        figuresDrawTriangle.push({\n          type: \"TRIANGLE\",\n          color: state.color,\n          backgroundColor: state.backgroundColor,\n          lineWidth: state.lineWidth,\n          array: [],\n          x: payload.x,\n          y: payload.y,\n        });\n      }\n      return { ...state, figures: [...figuresDrawTriangle] };\n    case actionTypes.SET_SELECTED_FIGURE:\n      return { ...state, selectedFigure: payload };\n    case actionTypes.SET_COLOR:\n      return {\n        ...state,\n        color: payload,\n      };\n    case actionTypes.SET_BACKGROUND_COLOR:\n      return {\n        ...state,\n        backgroundColor: payload,\n      };\n    case actionTypes.SET_WIDTH:\n      return { ...state, lineWidth: payload };\n    case actionTypes.SET_LINE:\n      let figures = [...state.figures];\n      figures.push({\n        type: \"Line\",\n        color: state.color,\n        lineWidth: state.lineWidth,\n        array: [],\n      });\n      return { ...state, figures: [...figures] };\n    case actionTypes.SET_ERASER:\n      let eraser = [...state.figures];\n      eraser.push({\n        type: \"ERASER\",\n        color: state.color,\n        lineWidth: state.lineWidth,\n        array: [],\n      });\n      return { ...state, figures: [...eraser] };\n    case actionTypes.SET_TEXT:\n      let text = [...state.figures];\n      text.push({\n        type: \"TEXT\",\n        color: state.color,\n        fontSize: state.lineWidth,\n        fontFamily: state.arrayFontSize[state.currentFontSize].font,\n        text: state.valueText,\n        x: payload.x,\n        y: payload.y,\n        fontStyle: state.fontStyle,\n      });\n      return { ...state, figures: [...text] };\n    case actionTypes.DRAW_LINE:\n      let drawLines = [...state.figures];\n      drawLines[drawLines.length - 1].array = drawLines[\n        drawLines.length - 1\n      ].array.concat(payload);\n      return { ...state, figures: [...drawLines] };\n    case actionTypes.SET_CURRENT_SIZE:\n      return { ...state, currentFontSize: payload };\n    case actionTypes.SET_ALIGN:\n      return { ...state, currentAlign: payload };\n    case actionTypes.SET_VALUE_TEXT:\n      return { ...state, valueText: payload };\n    case actionTypes.SET_STYLE:\n      return { ...state, fontStyle: payload };\n\n    default:\n      return state;\n  }\n}\n\nexport default panelTools;\n","export const actionTypes = {\n  SET_DRAW: \"SET_DRAW\",\n  SET_SCALE: \"SET_SCALE\",\n};\n\nexport const appActions = {\n  setDraw: (value: any) => ({ type: actionTypes.SET_DRAW, payload: value }),\n  setScale: (value: any) => ({ type: actionTypes.SET_SCALE, payload: value }),\n};\n\nconst initialState = {\n  draw: false,\n  scale: 0.8, // scale main scene\n};\n\nfunction controlScene(state = initialState, { type, payload }: any) {\n  switch (type) {\n    case actionTypes.SET_DRAW:\n      return { ...state, draw: payload };\n    case actionTypes.SET_SCALE:\n      return { ...state, scale: payload };\n    default:\n      return state;\n  }\n}\n\nexport default controlScene;\n","import React, { useState, useEffect } from \"react\";\nimport { Text, Transformer } from \"react-konva\";\n\ninterface IProps {\n  x: number;\n  y: number;\n  text: string;\n  edit: boolean;\n  color: string;\n  fontSize: number;\n  fontStyle: string;\n  fontFamily: string;\n  align: string;\n  setDrawScene(): void;\n}\n\nexport default (props: IProps) => {\n  const textRef: any = React.useRef();\n  const trRef: any = React.useRef();\n  const [isSelected, setIsSelected] = useState(false);\n\n  useEffect(() => {\n    console.log(\"props.color\");\n    console.log(props.color);\n  }, []);\n\n  useEffect(() => {\n    if (isSelected === true) {\n      trRef.current.setNode(textRef.current);\n      trRef.current.getLayer().batchDraw();\n    } else {\n      console.log(\"no\");\n    }\n  }, [isSelected]);\n\n  const selectText = () => {\n    console.log(\"select text\");\n    setIsSelected(!isSelected);\n    props.setDrawScene();\n  };\n\n  return (\n    <React.Fragment>\n      <Text\n        x={props.x}\n        y={props.y}\n        align={props.align}\n        fill={props.color}\n        ref={textRef}\n        fontFamily={props.fontFamily}\n        fontSize={props.fontSize}\n        fontStyle={props.fontStyle}\n        text={props.text}\n        draggable={true}\n        onClick={() => selectText()}\n      />\n      <Transformer ref={trRef} />\n    </React.Fragment>\n  );\n};\n","import React, { useEffect, useState } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { appActions as actionPanel } from \"reducers/panelTools\";\nimport { appActions } from \"reducers/controlScene\";\nimport Button from \"@material-ui/core/Button\";\nimport { makeStyles } from \"@material-ui/core/styles\";\nimport { Stage, Layer, Rect, Line, Transformer } from \"react-konva\";\nimport Konva from \"konva\";\nimport TextComponents from \"./components/Text\";\nimport LineComponents from \"./components/Line\";\n\ninterface IFont {\n  id: number;\n  font: string;\n}\n\ninterface IProps {\n  setFigures(obj: any): void;\n  lineWidth: number;\n  color: string;\n  scale: number;\n  currentTool: string;\n  draw(): void;\n  setLine(): void;\n  drawLine(array: number[]): void;\n  setEraser(): void;\n  setText(obj: any): void;\n  setFigureDraw(obj: any): void;\n  figures: Array<any>;\n  arrayFontSize: Array<IFont>;\n  currentFontSize: number;\n  currentAlign: string;\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  height: 80vh;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n`;\n\nconst Card = styled.div`\n  width: 1200px;\n  height: 800px;\n  position: absolute;\n  background-color: #fff;\n`;\n\nfunction Scene(props: IProps) {\n  const [drawScene, setDrawScene] = useState(true);\n\n  const draw = (e: any) => {\n    const canvas: any = document.getElementById(\"mainCanvas\");\n    switch (props.currentTool) {\n      case \"brush\":\n        props.setLine();\n        canvas.onmousemove = (e: any) => {\n          props.drawLine([e.offsetX, e.offsetY]);\n        };\n        break;\n\n      case \"delete\":\n        props.setEraser();\n        canvas.onmousemove = (e: any) => {\n          props.drawLine([e.offsetX, e.offsetY]);\n        };\n        break;\n    }\n\n    canvas.onmouseup = () => {\n      canvas.onmousemove = null;\n    };\n  };\n\n  const clicked = (e: any) => {\n    switch (props.currentTool) {\n      case \"text\":\n        props.setText({ x: e.evt.offsetX, y: e.evt.offsetY });\n        break;\n      case \"figure\":\n        props.setFigureDraw({ x: e.evt.offsetX, y: e.evt.offsetY });\n        break;\n    }\n  };\n\n  const onFigure = () => {\n    setDrawScene(false);\n    (document as any).body.style.cursor = `move`;\n  };\n\n  const offFigure = () => {\n    setDrawScene(true);\n    (document as any).body.style.cursor = `default`;\n  };\n\n  return (\n    <Wrapper>\n      <Card style={{ transform: `scale(${props.scale})` }}>\n        <div id=\"mainCanvas\">\n          <Stage\n            container={\"mainCanvas\"}\n            onMouseDown={(e: any) => drawScene && draw(e)}\n            onClick={(e: any) => (drawScene ? clicked(e) : setDrawScene(true))}\n            width={1200}\n            height={800}\n          >\n            <Layer>\n              {props.figures.map((item: any, i: number) => {\n                switch (item.type) {\n                  case \"Line\":\n                    return (\n                      <Line\n                        key={i}\n                        points={item.array}\n                        stroke={item.color}\n                        draggable={true}\n                        onMouseDown={() => onFigure()}\n                        onMouseUp={() => offFigure()}\n                        strokeWidth={item.lineWidth}\n                      />\n                    );\n                  case \"ERASER\":\n                    return (\n                      <Line\n                        key={i}\n                        points={item.array}\n                        stroke={\"white\"}\n                        strokeWidth={item.lineWidth}\n                      />\n                    );\n                  // case \"TRIANGLE\":\n                  //   return (\n                  //     <LineComponents\n                  //       key={i}\n                  //       x={item.x}\n                  //       y={item.y}\n                  //       edit={drawScene}\n                  //       points={[0, 0, 100, 0, 100, 100]}\n                  //       backgroundColor={item.backgroundColor}\n                  //       stroke={item.color}\n                  //       strokeWidth={item.lineWidth}\n                  //       setDrawScene={() => setDrawScene(false)}\n                  //     />\n                  //   );\n                  case \"TEXT\":\n                    return (\n                      <TextComponents\n                        key={i}\n                        edit={drawScene}\n                        x={item.x}\n                        y={item.y}\n                        color={item.color}\n                        fontFamily={item.fontFamily}\n                        align={props.currentAlign}\n                        fontSize={item.fontSize}\n                        fontStyle={item.fontStyle}\n                        text={item.text}\n                        setDrawScene={() => setDrawScene(false)}\n                      />\n                    );\n\n                  default:\n                    return (\n                      <Line\n                        key={i}\n                        points={item.array}\n                        stroke={item.color}\n                        strokeWidth={item.lineWidth}\n                      />\n                    );\n                }\n              })}\n            </Layer>\n          </Stage>\n        </div>\n      </Card>\n    </Wrapper>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    draw: state.controlScene.draw,\n    scale: state.controlScene.scale,\n    color: state.panelTools.color,\n    lineWidth: state.panelTools.lineWidth,\n    currentTool: state.panelTools.currentTool,\n    figures: state.panelTools.figures,\n    currentFontSize: state.panelTools.currentFontSize,\n    arrayFontSize: state.panelTools.arrayFontSize,\n    currentAlign: state.panelTools.currentAlign,\n  };\n};\n\nconst action = {\n  setDraw: appActions.setDraw,\n  setFigures: actionPanel.setFigures,\n  setLine: actionPanel.setLine,\n  drawLine: actionPanel.drawLine,\n  setEraser: actionPanel.setEraser,\n  setText: actionPanel.setText,\n  setFigureDraw: actionPanel.setFigureDraw,\n};\n\nexport default connect(mapStateToProps, action)(Scene);\n","import React, { useEffect } from \"react\";\nimport { connect } from \"react-redux\";\nimport styled from \"styled-components\";\nimport { appActions } from \"reducers/panelTools\";\nimport IconButton from \"@material-ui/core/IconButton\";\nimport EditIcon from \"@material-ui/icons/Edit\";\nimport BrushOutlinedIcon from \"@material-ui/icons/BrushOutlined\";\nimport TextFieldsIcon from \"@material-ui/icons/TextFields\";\nimport PermDataSettingIcon from \"@material-ui/icons/PermDataSetting\";\n\nconst Wrapper = styled.div`\n  width: 3%;\n  height: 80vh;\n  position: fixed;\n  z-index: 999;\n  background: #dddddd;\n`;\n\nconst Container = styled.div`\n  display: flex;\n  justify-content: space-around;\n  flex-wrap: wrap;\n`;\n\nfunction returnTool(props: any) {\n  switch (props.type) {\n    case \"brush\":\n      return (\n        <BrushOutlinedIcon\n          fontSize=\"small\"\n          style={{ color: props.selected ? \"black\" : \"grey\" }}\n        />\n      );\n    case \"delete\":\n      return (\n        <EditIcon\n          fontSize=\"small\"\n          style={{ color: props.selected ? \"black\" : \"grey\" }}\n        />\n      );\n    case \"text\":\n      return (\n        <TextFieldsIcon\n          fontSize=\"small\"\n          style={{ color: props.selected ? \"black\" : \"grey\" }}\n        />\n      );\n    case \"figure\":\n      return (\n        <PermDataSettingIcon\n          fontSize=\"small\"\n          style={{ color: props.selected ? \"black\" : \"grey\" }}\n        />\n      );\n  }\n}\n\nfunction PanelTools(props: any) {\n  return (\n    <Wrapper>\n      <Container>\n        {props.tools.map((item: any, i: number) => (\n          <IconButton\n            color=\"primary\"\n            aria-label=\"upload picture\"\n            component=\"span\"\n            onClick={() => props.selectTools(item.type)}\n            key={i}\n          >\n            {returnTool({ type: item.type, selected: item.selected })}\n          </IconButton>\n        ))}\n      </Container>\n    </Wrapper>\n  );\n}\n\nconst mapStateToProps = (state: any) => {\n  return {\n    tools: state.panelTools.tools,\n  };\n};\n\nconst action = {\n  selectTools: appActions.selectTools,\n};\n\nexport default connect(mapStateToProps, action)(PanelTools);\n","export const actionTypes = {\n  CLICK_DONE_SHOT: \"CLICK_DONE_SHOT\",\n  CREATE_VIDEO: \"CREATE_VIDEO\",\n};\n\nexport const appActions = {\n  clickDoneShot: (value: any) => ({\n    type: actionTypes.CLICK_DONE_SHOT,\n    payload: value,\n  }),\n  createVideo: () => ({\n    type: actionTypes.CREATE_VIDEO,\n  }),\n};\n\nconst initialState = {\n  shots: [],\n};\n\nfunction TimeLine(state = initialState, { type, payload }: any) {\n  switch (type) {\n    case actionTypes.CLICK_DONE_SHOT:\n      return { ...state };\n    case actionTypes.CREATE_VIDEO:\n      return { ...state };\n    default:\n      return state;\n  }\n}\n\nexport default TimeLine;\n","import React from \"react\";\nimport { connect } from \"react-redux\";\nimport { appActions } from \"reducers/timeLine\";\nimport Button from \"@material-ui/core/Button\";\n\nfunction TimeLine(props: any) {\n  return (\n    <React.Fragment>\n      <Button variant=\"contained\" onClick={props.clickDoneShot}>\n        Click done shot\n      </Button>\n      <Button variant=\"contained\" onClick={props.createVideo}>\n        Done video\n      </Button>\n    </React.Fragment>\n  );\n}\n\n// const mapStateToProps = (state: any) => {\n//   return {\n//     draw: state.controlScene.draw,\n//     scale: state.controlScene.scale,\n//   };\n// };\n\nconst action = {\n  clickDoneShot: appActions.clickDoneShot,\n  createVideo: appActions.createVideo,\n};\n\nexport default connect(() => {}, action)(TimeLine);\n","import React, { useState, useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport { connect } from \"react-redux\";\nimport { appActions } from \"reducers/panelTools\";\nimport { ChromePicker } from \"react-color\";\nimport FormatAlignLeftIcon from \"@material-ui/icons/FormatAlignLeft\";\nimport FormatAlignRightIcon from \"@material-ui/icons/FormatAlignRight\";\nimport FormatAlignCenterIcon from \"@material-ui/icons/FormatAlignCenter\";\nimport FormatBoldIcon from \"@material-ui/icons/FormatBold\";\nimport IndeterminateCheckBoxIcon from \"@material-ui/icons/IndeterminateCheckBox\";\nimport FormatItalicIcon from \"@material-ui/icons/FormatItalic\";\nimport ChangeHistoryIcon from \"@material-ui/icons/ChangeHistory\";\nimport CheckBoxOutlineBlankIcon from \"@material-ui/icons/CheckBoxOutlineBlank\";\nimport RadioButtonUncheckedIcon from \"@material-ui/icons/RadioButtonUnchecked\";\n\nimport {\n  TextField,\n  Button,\n  NativeSelect,\n  FormControl,\n  InputLabel,\n  ButtonGroup,\n} from \"@material-ui/core\";\n\ninterface IFont {\n  id: number;\n  font: string;\n}\n\ninterface IProps {\n  color: string;\n  backgroundColor: string;\n  lineWidth: number;\n  currentTool: string;\n  arrayFontSize: Array<IFont>;\n  currentFontSize: number;\n  arrayAlign: Array<string>;\n  currentAlign: string;\n  valueText: string;\n  arrayFontStyle: Array<string>;\n  arrayFiguresDraw: Array<string>;\n  fontStyle: string;\n  selectedFigure: string;\n  setColor(color: any): void;\n  setWidth(width: number): void;\n  setCurrentSize(payload: any): void;\n  setAlign(payload: string): void;\n  setValueText(payload: string): void;\n  setStyle(payload: string): void;\n  setSelectedFigure(payload: string): void;\n  setBackgroundColor(payload: string): void;\n}\n\ninterface IColorDispalay {\n  color: string;\n}\n\nconst Wrapper = styled.div`\n  width: 100%;\n  padding: 10px;\n  box-sizing: border-box;\n  display: flex;\n  background-color: #dddddd;\n  z-index: 9999;\n  position: relative;\n`;\n\nconst ColorPickerOverlay = styled.div`\n  position: relative;\n`;\n\nconst ColorPickerOverlayBG = styled.div`\n  margin-left: 120px;\n  position: relative;\n`;\nconst ColorPicker = styled.div`\n  position: absolute;\n  z-index: 9999;\n  top: 0px;\n`;\n\nconst ColorPickerBG = styled.div`\n  position: absolute;\n  z-index: 9999;\n  top: 0px;\n  left: 100px;\n`;\n\nconst ColorDisplay = styled.div`\n  background: ${(props: IColorDispalay) => props.color};\n  width: 20px;\n  height: 20px;\n  margin-left: 10px;\n`;\n\nconst TextFieldGroup = styled.div`\n  display: flex;\n  margin-left: 60px;\n`;\n\nconst TextGroup = styled.div`\n  display: flex;\n  align-items: center;\n`;\n\nconst TopPanel = (props: IProps) => {\n  const [displayColorPicker, setDisplayColorPicker] = useState<boolean>(false);\n  const [displayColorPickerBG, setDisplayColorPickerBG] = useState<boolean>(\n    false,\n  );\n\n  return (\n    <Wrapper>\n      <ButtonGroup>\n        <Button onClick={() => setDisplayColorPicker(!displayColorPicker)}>\n          Color <ColorDisplay color={props.color}></ColorDisplay>\n        </Button>\n      </ButtonGroup>\n      {displayColorPicker && (\n        <ColorPickerOverlay>\n          <ColorPicker>\n            <ChromePicker\n              color={props.color}\n              onChange={(ev: any) => {\n                const { r, g, b, a } = ev.rgb;\n                props.setColor(`rgba(${r}, ${g}, ${b}, ${a})`);\n              }}\n            />\n          </ColorPicker>\n        </ColorPickerOverlay>\n      )}\n\n      <TextFieldGroup>\n        <TextField\n          label={props.currentTool === \"text\" ? \"FZ\" : \"WL\"}\n          style={{ width: \"45px\" }}\n          type=\"number\"\n          value={props.lineWidth}\n          onChange={(e: any) =>\n            e.target.value > 0 && props.setWidth(e.target.value)\n          }\n        />\n        {props.currentTool === \"text\" && (\n          <TextGroup>\n            <TextField\n              label={\"Text\"}\n              type=\"text\"\n              value={props.valueText}\n              style={{ marginLeft: \"20px\" }}\n              onChange={(e: any) => props.setValueText(e.target.value)}\n            />\n            <FormControl>\n              <InputLabel htmlFor=\"filled-age-native-simple\">\n                fontFamily\n              </InputLabel>\n              <NativeSelect\n                value={props.currentFontSize}\n                onChange={(\n                  event: React.ChangeEvent<{ name?: string; value: unknown }>,\n                ) => props.setCurrentSize(event.target.value)}\n                style={{ marginLeft: \"20px\" }}\n                inputProps={{\n                  name: \"fontFamily\",\n                  id: \"filled-age-native-simple\",\n                }}\n              >\n                {props.arrayFontSize.map((item: IFont) => (\n                  <option value={item.id}>{item.font}</option>\n                ))}\n              </NativeSelect>\n            </FormControl>\n            <FormControl style={{ marginLeft: \"20px\" }}>\n              <ButtonGroup size=\"small\">\n                {props.arrayAlign.map((item) => {\n                  switch (item) {\n                    case \"left\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.currentAlign === item ? \"#ccc\" : \"none\",\n                          }}\n                          onClick={() => props.setAlign(item)}\n                        >\n                          <FormatAlignLeftIcon />\n                        </Button>\n                      );\n                    case \"center\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.currentAlign === item ? \"#ccc\" : \"none\",\n                          }}\n                          onClick={() => props.setAlign(item)}\n                        >\n                          <FormatAlignCenterIcon />\n                        </Button>\n                      );\n                    case \"right\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.currentAlign === item ? \"#ccc\" : \"none\",\n                          }}\n                          onClick={() => props.setAlign(item)}\n                        >\n                          <FormatAlignRightIcon />\n                        </Button>\n                      );\n                  }\n                })}\n              </ButtonGroup>\n            </FormControl>\n            <FormControl style={{ marginLeft: \"20px\" }}>\n              <ButtonGroup size=\"small\">\n                {props.arrayFontStyle.map((item, i) => {\n                  switch (item) {\n                    case \"normal\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.fontStyle === item ? \"#ccc\" : \"none\",\n                          }}\n                          key={i}\n                          onClick={() => props.setStyle(item)}\n                        >\n                          <IndeterminateCheckBoxIcon />\n                        </Button>\n                      );\n                    case \"bold\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.fontStyle === item ? \"#ccc\" : \"none\",\n                          }}\n                          key={i}\n                          onClick={() => props.setStyle(item)}\n                        >\n                          <FormatBoldIcon />\n                        </Button>\n                      );\n                    case \"italic\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.fontStyle === item ? \"#ccc\" : \"none\",\n                          }}\n                          key={i}\n                          onClick={() => props.setStyle(item)}\n                        >\n                          <FormatItalicIcon />\n                        </Button>\n                      );\n                  }\n                })}\n              </ButtonGroup>\n            </FormControl>\n          </TextGroup>\n        )}\n        {props.currentTool === \"figure\" && (\n          <TextGroup>\n            <ButtonGroup>\n              <Button\n                style={{ marginLeft: \"20px\" }}\n                onClick={() => setDisplayColorPickerBG(!displayColorPickerBG)}\n              >\n                BGColor{\" \"}\n                <ColorDisplay color={props.backgroundColor}></ColorDisplay>\n              </Button>\n\n              {displayColorPickerBG && (\n                <ColorPickerOverlay>\n                  <ColorPicker>\n                    <ChromePicker\n                      color={props.backgroundColor}\n                      onChange={(ev: any) => {\n                        const { r, g, b, a } = ev.rgb;\n                        props.setBackgroundColor(\n                          `rgba(${r}, ${g}, ${b}, ${a})`,\n                        );\n                      }}\n                    />\n                  </ColorPicker>\n                </ColorPickerOverlay>\n              )}\n            </ButtonGroup>\n\n            <FormControl style={{ marginLeft: \"20px\" }}>\n              <ButtonGroup size=\"small\">\n                {props.arrayFiguresDraw.map((item, i) => {\n                  switch (item) {\n                    case \"triangle\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.selectedFigure === item ? \"#ccc\" : \"none\",\n                          }}\n                          key={i}\n                          onClick={() => props.setSelectedFigure(item)}\n                        >\n                          <ChangeHistoryIcon />\n                        </Button>\n                      );\n                    case \"square\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.selectedFigure === item ? \"#ccc\" : \"none\",\n                          }}\n                          key={i}\n                          onClick={() => props.setSelectedFigure(item)}\n                        >\n                          <CheckBoxOutlineBlankIcon />\n                        </Button>\n                      );\n                    case \"circle\":\n                      return (\n                        <Button\n                          style={{\n                            background:\n                              props.selectedFigure === item ? \"#ccc\" : \"none\",\n                          }}\n                          key={i}\n                          onClick={() => props.setSelectedFigure(item)}\n                        >\n                          <RadioButtonUncheckedIcon />\n                        </Button>\n                      );\n                  }\n                })}\n              </ButtonGroup>\n            </FormControl>\n          </TextGroup>\n        )}\n      </TextFieldGroup>\n    </Wrapper>\n  );\n};\n\nconst mapStateToProps = (state: any) => {\n  return {\n    color: state.panelTools.color,\n    backgroundColor: state.panelTools.backgroundColor,\n    lineWidth: state.panelTools.lineWidth,\n    currentTool: state.panelTools.currentTool,\n    currentFontSize: state.panelTools.currentFontSize,\n    arrayFontSize: state.panelTools.arrayFontSize,\n    arrayAlign: state.panelTools.arrayAlign,\n    currentAlign: state.panelTools.currentAlign,\n    valueText: state.panelTools.valueText,\n    arrayFontStyle: state.panelTools.arrayFontStyle,\n    arrayFiguresDraw: state.panelTools.arrayFiguresDraw,\n    selectedFigure: state.panelTools.selectedFigure,\n    fontStyle: state.panelTools.fontStyle,\n  };\n};\n\nconst action = {\n  setColor: appActions.setColor,\n  setWidth: appActions.setWidth,\n  setCurrentSize: appActions.setCurrentSize,\n  setAlign: appActions.setAlign,\n  setStyle: appActions.setStyle,\n  setValueText: appActions.setValueText,\n  setBackgroundColor: appActions.setBackgroundColor,\n  setSelectedFigure: appActions.setSelectedFigure,\n};\n\nexport default connect(mapStateToProps, action)(TopPanel);\n","import React, { useEffect } from \"react\";\nimport styled from \"styled-components\";\nimport Scene from \"components/Scene\";\nimport PanelTools from \"components/PanelTools\";\nimport TimeLine from \"components/TimeLine\";\nimport TopPanel from \"components/TopPanel\";\n\nconst Wrapper = styled.div``;\n\nfunction App() {\n  return (\n    <Wrapper>\n      <TopPanel />\n      <PanelTools />\n      <Scene />\n      <TimeLine />\n    </Wrapper>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { put, call, select } from \"redux-saga/effects\";\nimport request, { requestGet } from \"api/request\";\n\nexport function* setDraw(payload: boolean) {\n  console.log(\"SAGA WORKING!!!\");\n}\n\nexport function* setScreenShot() {\n  const wrapper: HTMLHeadingElement | null = document.querySelector(\n    \"#mainCanvas\",\n  );\n  if (wrapper !== null) {\n    const canvas: any = wrapper.querySelector(\"canvas\");\n    if (canvas !== null) {\n      request(\"http://localhost:5000/short\", canvas.toDataURL());\n      console.log(canvas.toDataURL());\n    }\n  }\n}\nexport function* createVideo() {\n  requestGet(\"http://localhost:5000/createvideo\");\n}\n","import axios from \"axios\";\n\nexport default (url: string, data: any) => {\n  return axios\n    .post(url, { data: data })\n    .then((res) => {\n      if (res.status !== 200) {\n        throw new Error();\n      } else {\n        return res;\n      }\n    })\n    .catch((error) => {\n      console.log(error);\n    });\n};\n\nexport const requestGet = (url: string) => {\n  return axios.get(url);\n};\n","import { takeEvery, all, take } from \"redux-saga/effects\";\nimport { actionTypes } from \"reducers/controlScene\";\nimport { actionTypes as actionTimeLine } from \"reducers/timeLine\";\nimport * as controlScene from \"controlSaga\";\n\nexport function* rootSaga() {\n  yield takeEvery(actionTypes.SET_DRAW, controlScene.setDraw);\n  yield takeEvery(actionTimeLine.CLICK_DONE_SHOT, controlScene.setScreenShot);\n  yield takeEvery(actionTimeLine.CREATE_VIDEO, controlScene.createVideo);\n}\n","import { createStore, compose, combineReducers, applyMiddleware } from \"redux\";\nimport { composeWithDevTools } from \"redux-devtools-extension\";\nimport controlScene from \"reducers/controlScene\";\nimport panelTools from \"reducers/panelTools\";\nimport TimeLine from \"reducers/timeLine\";\nimport createSagaMiddleware from \"redux-saga\";\nimport { rootSaga } from \"sagas\";\n\nconst sagaMiddleware = createSagaMiddleware();\nconst reducers = combineReducers({\n  controlScene,\n  panelTools,\n  timeLine: TimeLine,\n});\n\nconst composeEnhancers = composeWithDevTools({\n  // Specify name here, actionsBlacklist, actionsCreators and other options if needed\n});\n\nconst store = createStore(\n  reducers,\n  composeEnhancers(applyMiddleware(sagaMiddleware)),\n);\n\nsagaMiddleware.run(rootSaga);\n\nexport default store;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"store\";\nimport { appActions } from \"reducers/controlScene\";\n\n(window as any).addEventListener(\"wheel\", (e: any) => {\n  let scale: number = store.getState().controlScene.scale;\n  if (e.wheelDelta > 0 && scale < 5) {\n    scale += 0.1;\n  }\n\n  if (e.wheelDelta < 0 && scale > 0.5) {\n    scale -= 0.1;\n  }\n  store.dispatch(appActions.setScale(scale));\n});\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\"),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}